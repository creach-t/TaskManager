import React, { useEffect, useState } from 'react';
import axios from 'axios';
import './TaskManager.css';

function TaskManager() {
    // State pour g√©rer les t√¢ches, le titre de la nouvelle t√¢che, le titre en cours d'√©dition, l'ID de la t√¢che en cours d'√©dition et les erreurs
    const [tasks, setTasks] = useState([]); // Liste des t√¢ches
    const [title, setTitle] = useState(''); // Titre de la nouvelle t√¢che
    const [editTitle, setEditTitle] = useState(''); // Titre en cours d'√©dition
    const [editingTaskId, setEditingTaskId] = useState(null); // ID de la t√¢che en cours d'√©dition (ou null)
    const [error, setError] = useState(null); // Erreur

    // Utilisation de useEffect pour charger les t√¢ches initiales au chargement du composant
    useEffect(() => {
        fetchTasks(); // Appel √† la fonction fetchTasks pour r√©cup√©rer les t√¢ches depuis l'API
    }, []);

    // Fonction pour r√©cup√©rer les t√¢ches depuis l'API
    const fetchTasks = () => {
        axios.get('http://localhost:8000/api/tasks/')
            .then(response => setTasks(response.data)) // Met √† jour l'√©tat 'tasks' avec les donn√©es r√©cup√©r√©es depuis l'API
            .catch(error => {
                console.error('There was an error fetching the tasks!', error); // Affiche une erreur en cas d'√©chec
                setError('There was an error fetching the tasks!'); // Met √† jour l'√©tat 'error' avec un message d'erreur
            });
    };

    // Fonction pour marquer une t√¢che comme compl√©t√©e ou non
    const handleComplete = (id, completed) => {
        const updatedTasks = tasks.map(task => task.id === id ? { ...task, completed } : task); // Met √† jour l'√©tat 'tasks' avec la t√¢che modifi√©e
        setTasks(updatedTasks); 

        axios.patch(`http://localhost:8000/api/tasks/${id}/`, { completed })
            .then(() => fetchTasks()) // Met √† jour les t√¢ches apr√®s la modification sur l'API
            .catch(error => {
                console.error('There was an error updating the task!', error); // Affiche une erreur en cas d'√©chec
                setError('There was an error updating the task!'); // Met √† jour l'√©tat 'error' avec un message d'erreur
                // R√©tablit l'√©tat pr√©c√©dent en cas d'√©chec de la mise √† jour sur l'API
                setTasks(tasks.map(task => task.id === id ? { ...task, completed: !completed } : task));
            });
    };

    // Fonction pour supprimer une t√¢che
    const handleDelete = (id) => {
        axios.delete(`http://localhost:8000/api/tasks/${id}/`)
            .then(() => fetchTasks()) // Met √† jour les t√¢ches apr√®s la suppression sur l'API
            .catch(error => {
                console.error('There was an error deleting the task!', error); // Affiche une erreur en cas d'√©chec
                setError('There was an error deleting the task!'); // Met √† jour l'√©tat 'error' avec un message d'erreur
            });
    };

    // Fonction pour soumettre le formulaire et ajouter une nouvelle t√¢che
    const handleSubmit = (event) => {
        event.preventDefault(); // Emp√™che le rechargement de la page
        axios.post('http://localhost:8000/api/tasks/', { title, completed: false })
            .then(() => {
                setTitle(''); // R√©initialise le champ de saisie du titre
                fetchTasks(); // Met √† jour les t√¢ches apr√®s l'ajout sur l'API
            })
            .catch(error => console.error('There was an error!', error)); // Affiche une erreur en cas d'√©chec
    };

    // Fonction pour commencer l'√©dition d'une t√¢che
    const handleEdit = (id, title) => {
        setEditingTaskId(id); // D√©finit l'ID de la t√¢che en cours d'√©dition
        setEditTitle(title); // Met √† jour le titre en cours d'√©dition
    };

    // Fonction pour mettre √† jour une t√¢che apr√®s √©dition
    const handleUpdate = (id) => {
        axios.patch(`http://localhost:8000/api/tasks/${id}/`, { title: editTitle })
            .then(() => {
                setEditingTaskId(null); // R√©initialise l'ID de la t√¢che en cours d'√©dition
                setEditTitle(''); // R√©initialise le titre en cours d'√©dition
                fetchTasks(); // Met √† jour les t√¢ches apr√®s la modification sur l'API
            })
            .catch(error => {
                console.error('There was an error updating the task!', error); // Affiche une erreur en cas d'√©chec
                setError('There was an error updating the task!'); // Met √† jour l'√©tat 'error' avec un message d'erreur
            });
    };

    // Rendu du composant TaskManager
    return (
        <div className="container">
            <h1>Liste des t√¢ches</h1>
            {error && <p>{error}</p>} {/* Affiche un message d'erreur s'il y a une erreur */}

            {/* Formulaire pour ajouter une nouvelle t√¢che */}
            <form onSubmit={handleSubmit}>
                <input
                    type="text"
                    value={title}
                    onChange={e => setTitle(e.target.value)}
                    placeholder="Nouvelle t√¢che"
                />
                <button type="submit">‚ûï</button>
            </form>

            {/* Liste des t√¢ches */}
            <ul>
                {tasks.map(task => (
                    <li key={task.id} className={`task-item ${editingTaskId === task.id ? 'editing' : ''}`}>
                        {/* Contenu de la t√¢che */}
                        <div className="task-content" onClick={() => {
                            if (editingTaskId !== task.id) {
                                handleComplete(task.id, !task.completed); // Marque la t√¢che comme compl√©t√©e ou non
                            }
                        }}>
                            <input
                                type="checkbox"
                                checked={task.completed}
                                readOnly
                                className="task-checkbox"
                                style={{ display: editingTaskId === task.id ? 'none' : 'inline-block' }}
                            />
                            <span className={`task-text ${task.completed ? 'completed' : ''}`}>
                                {task.title}
                            </span>
                        </div>
                        {/* Actions sur la t√¢che */}
                        <div className="task-actions">
                            {editingTaskId === task.id ? (
                                // Affiche les champs d'√©dition si la t√¢che est en cours d'√©dition
                                <>
                                    <input
                                        type="text"
                                        value={editTitle}
                                        onChange={e => setEditTitle(e.target.value)}
                                    />
                                    <button className="save-button" onClick={() => handleUpdate(task.id)}>üíæ</button>
                                    <button className="delete-button" onClick={() => setEditingTaskId(null)}>‚ùå</button>
                                </>
                            ) : (
                                // Affiche les boutons d'√©dition et de suppression sinon
                                <>
                                    <button className="edit-button" onClick={() => handleEdit(task.id, task.title)}>üñäÔ∏è</button>
                                    <button className="delete-button" onClick={() => handleDelete(task.id)}>‚ùå</button>
                                </>
                            )}
                        </div>
                    </li>
                ))}
            </ul>
        </div>
    );
}

export default TaskManager;
